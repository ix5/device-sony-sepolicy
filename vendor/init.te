# symlink /sdcard to backing block
allow init tmpfs:lnk_file create;
allow init configfs:file rw_file_perms;
allow init configfs:lnk_file { create unlink };

allow init { firmware_file bt_firmware_file persist_file qdsp_file }:dir mounton;

dontaudit init kernel:system module_request;

# Ignore all accidental O_CREAT open() calls on unsupported filesystems:
dontaudit init { sysfs_type proc_type }:file create;

# Why wouldn't it be allowed to do this?
allow init msm_irqbalance_exec:file execute;

# Allow the init process to read and write default_smp_affinity:
allow init proc_irq:file rw_file_perms;
allow init mnt_vendor_file:dir mounton;
allow init qdsp_file:lnk_file read;

# enable_ramdumps:
allow init sysfs_msm_subsys_restart:file rw_file_perms;
# BAD BAD BAD
# avc: denied { setattr } for comm="init" name="scheduler" dev="sysfs" ino=45146 scontext=u:r:init:s0 tcontext=u:object_r:sysfs:s0 tclass=file permissive=1
# avc: denied { write } for comm="init" name="sleep_millisecs" dev="sysfs" ino=26820 scontext=u:r:init:s0 tcontext=u:object_r:sysfs:s0 tclass=file permissive=1
# avc: denied { open } for comm="init" path="/sys/kernel/mm/ksm/sleep_millisecs" dev="sysfs" ino=26820 scontext=u:r:init:s0 tcontext=u:object_r:sysfs:s0 tclass=file permissive=1
#allow init sysfs:file { setattr open write };
allow init sysfs_sleep_msecs:file { setattr open write };

allow init nativetest_data_file:dir { getattr open read };
allow init nativetest_data_file:file getattr;
allow init sysfs_msm_subsys:file { open setattr write };
