type ipacm, domain;
type ipacm_exec, exec_type, vendor_file_type, file_type;

net_domain(ipacm)
init_daemon_domain(ipacm)

# avc: denied { call } for comm="ipacm" scontext=u:r:ipacm:s0 tcontext=u:r:hwservicemanager:s0 tclass=binder
# avc: denied { transfer } for comm="ipacm" scontext=u:r:ipacm:s0 tcontext=u:r:hwservicemanager:s0 tclass=binder
# avc: denied { search } for comm="hwservicemanage" name="662" dev="proc" ino=21174 scontext=u:r:hwservicemanager:s0 tcontext=u:r:ipacm:s0 tclass=dir
hwbinder_use(ipacm)

binder_call(ipacm, system_server)

allow ipacm system_server:netlink_netfilter_socket { getattr read setopt write };

# TODO: Fine-tune this
allow ipacm ipacm_socket:sock_file { create read write };
allow ipacm self:socket { create read write };
userdebug_or_eng(`
  auditallow ipacm ipacm_socket:sock_file { create read write };
  auditallow ipacm self:socket { create read write };
')

# avc: denied { write } for name="ipa" dev="mmcblk0p54" ino=213035 scontext=u:r:ipacm:s0 tcontext=u:object_r:vendor_data_file:s0 tclass=dir
# avc: denied { add_name } for name="ipacm.pid" scontext=u:r:ipacm:s0 tcontext=u:object_r:vendor_data_file:s0 tclass=dir
# avc: denied { create } for name="ipacm.pid" scontext=u:r:ipacm:s0 tcontext=u:object_r:vendor_data_file:s0 tclass=file
# avc: denied { read write open } for path="/data/vendor/ipa/ipacm.pid" dev="mmcblk0p54" ino=213036 scontext=u:r:ipacm:s0 tcontext=u:object_r:vendor_data_file:s0 tclass=file
# avc: denied { lock } for path="/data/vendor/ipa/ipacm.pid" dev="mmcblk0p54" ino=213036 scontext=u:r:ipacm:s0 tcontext=u:object_r:vendor_data_file:s0 tclass=file
allow ipacm ipa_vendor_data_file:dir create_dir_perms;
allow ipacm ipa_vendor_data_file:file create_file_perms;

# avc: denied { read } for name="u:object_r:hwservicemanager_prop:s0" dev="tmpfs" ino=16651 scontext=u:r:ipacm:s0 tcontext=u:object_r:hwservicemanager_prop:s0 tclass=file permissive=0
allow ipacm hwservicemanager_prop:file r_file_perms;

# For reference:
#define(`binder_call', `
# Call the server domain and optionally transfer references to it.
#allow $1 $2:binder { call transfer };
# Allow the serverdomain to transfer references to the client on the reply.
#allow $2 $1:binder transfer;
# Receive and use open files from the server.
#allow $1 $2:fd use;

# Auto-generated by autdit2allow:
#============= ipacm ==============
#allow ipacm system_server:fd use;
#allow ipacm system_server:netlink_netfilter_socket { getattr read setopt write };
#============= system_server ==============
#allow system_server ipacm:binder transfer;

# With tethering hardware acceleration and ipacm, tetheroffload HALs enabled:
# avc: denied { call } for comm="android.io" scontext=u:r:system_server:s0 tcontext=u:r:ipacm:s0 tclass=binder
# avc: denied { use } for comm="android.io" path="socket:[43705]" dev="sockfs" ino=43705 scontext=u:r:ipacm:s0 tcontext=u:r:system_server:s0 tclass=fd
# avc: denied { read write } for comm="android.io" path="socket:[43705]" dev="sockfs" ino=43705 scontext=u:r:ipacm:s0 tcontext=u:r:system_server:s0 tclass=netlink_netfilter_socket
# avc: denied { getattr } for comm="HwBinder:703_1" scontext=u:r:ipacm:s0 tcontext=u:r:system_server:s0 tclass=netlink_netfilter_socket
# avc: denied { setopt } for comm="HwBinder:703_1" scontext=u:r:ipacm:s0 tcontext=u:r:system_server:s0 tclass=netlink_netfilter_socket
# avc: denied { transfer } for comm="android.io" scontext=u:r:system_server:s0 tcontext=u:r:ipacm:s0 tclass=binder
